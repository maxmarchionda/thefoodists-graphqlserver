/// <reference types="@types/node" />
import { IResolvers } from 'graphql-tools';
import { Server as HttpServer } from 'http';
import { GraphQLSchema, GraphQLFieldResolver, ValidationContext } from 'graphql';
import { GraphQLExtension } from 'graphql-extensions';
import { GraphQLServerOptions as GraphQLOptions } from './graphqlOptions';
import { LogFunction } from './logging';
import { Config, ListenOptions, RegistrationOptions, ServerInfo } from './types';
export declare class ApolloServerBase<Request = RequestInit> {
    disableTools: boolean;
    subscriptionsPath: string;
    requestOptions: Partial<GraphQLOptions<any>>;
    private schema;
    private context?;
    private graphqlPath;
    private engineReportingAgent?;
    private engineProxy;
    private extensions;
    private http?;
    private subscriptionServer?;
    protected getHttp: () => HttpServer;
    constructor(config: Config);
    use({getHttp, path}: RegistrationOptions): void;
    enhanceSchema(schema: GraphQLSchema | {
        typeDefs: string;
        resolvers: IResolvers;
    }): void;
    listen(opts?: ListenOptions): Promise<ServerInfo>;
    stop(): Promise<void>;
    private createSubscriptionServer(server, config);
    private createEngine({engineInRequestPath, engineProxy});
    graphQLServerOptionsForRequest(request: Request): Promise<{
        schema: GraphQLSchema;
        formatError?: Function;
        rootValue?: any;
        context: any;
        logFunction: LogFunction;
        formatParams?: Function;
        validationRules?: ((context: ValidationContext) => any)[];
        formatResponse?: Function;
        fieldResolver: GraphQLFieldResolver<any, any, {
            [argName: string]: any;
        }>;
        debug?: boolean;
        tracing?: boolean;
        cacheControl?: any;
        extensions: (() => GraphQLExtension<any>)[] | (() => GraphQLExtension<any>)[];
    }>;
}
